{"version":3,"sources":["../../src/models/db-query.js"],"names":["connectionString","process","env","DATABASE_URL","current_env","usersTable","getAll","Promise","resolve","reject","client","Client","connect","then","sql","query","result","rows","end","catch","e","createUser","params","item","email","password","name","rowCount","getUser","clearTable"],"mappings":"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","file":"db-query.js","sourcesContent":["import { Client } from 'pg';\n\nlet connectionString = process.env.DATABASE_URL || 'postgres://localhost:5432/ride-my-way';\n\nif (process.env.current_env === 'test') {\n  connectionString = 'postgres://localhost:5432/ride-my-way-test';\n}\n\nconst usersTable = 'users';\n// const orderTable = 'orders';\n\nconst getAll = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT * FROM ${usersTable}`;\n      client.query(sql)\n        .then((result) => {\n          // console.log(result.rows);\n          resolve(result.rows);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nconst createUser = item => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `INSERT INTO ${usersTable} (user_email, user_password, user_name) VALUES ($1, $2, $3)`;\n      const params = [item.email, item.password, item.name];\n      client.query(sql, params)\n        .then((result) => {\n          // console.log(result.rows);\n          resolve(result.rowCount);\n          client.end();\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst getUser = email => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT * FROM ${usersTable} WHERE user_email = $1;`;\n      const params = [email];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nconst clearTable = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `DELETE FROM ${usersTable};`;\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rowCount);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\n\nexport {\n  getAll, createUser, getUser, clearTable,\n};\n\n\n// CREATE TABLE users(user_id serial PRIMARY KEY, user_name text NOT NULL, user_email text UNIQUE NOT NULL, user_password text NOT NULL);\n// const client = new Client({ connectionString, ssl: true });\n"]}