{"version":3,"sources":["../../src/test/rides.test.js"],"names":["describe","it","app","get","set","expect","then","response","body","length","toBe","toHaveProperty","error","toContain","post","send","destination","takeOffTime","totalSeats","message","rideOffers","name","requests"],"mappings":"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","file":"rides.test.js","sourcesContent":["import expect from 'expect';\r\nimport request from 'supertest';\r\nimport app from '../app';\r\nimport rideOffers from '../models/rideOffers';\r\n\r\ndescribe('GET /rides', () => {\r\n  it('should fetch all ride offers', () => request(app)\r\n    .get('/api/v1/rides')\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.length).toBe(2);\r\n    }));\r\n});\r\n\r\ndescribe('GET /rides/<rideId>', () => {\r\n  it('should fetch a single ride offer with valid id', () => request(app)\r\n    .get('/api/v1/rides/qruhn9b5h4jk4f8uiw')\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body).toHaveProperty('destination', 'Lokoja');\r\n    }));\r\n\r\n  it('should return 404 with invalid ride id', () => request(app)\r\n    .get('/api/v1/rides/qruhn9b5h4jk4f8u')\r\n    .set('Accept', 'application/json')\r\n    .expect(404)\r\n    .then((response) => {\r\n      expect(response.body.error.error).toContain('Invalid ride')\r\n    }));\r\n});\r\ndescribe('POST /rides', () => {\r\n  it('should create a new ride offer', () => request(app)\r\n    .post('/api/v1/rides')\r\n    .send({ destination: 'Ibadan', takeOffTime: '10:30pm', totalSeats: 16 })\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.message).toContain('successfully created');\r\n      expect(rideOffers.length).toBe(3);\r\n    }));\r\n\r\n  it('should not create new ride offer with invalid input', () => request(app)\r\n    .post('/api/v1/rides')\r\n    .send({ takeOffTime: '10:30pm', totalSeats: 16 })\r\n    .set('Accept', 'application/json')\r\n    .expect(400)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('required parameters');\r\n      expect(rideOffers.length).toBe(3);\r\n    }));\r\n});\r\n\r\ndescribe('POST /rides/<rideId>/requests', () => {\r\n  it('should make request to join ride', () => request(app)\r\n    .post('/api/v1/rides/qruhn9b5h4jk4f8uiw/requests')\r\n    .send({ name: 'William Smith' })\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.message).toContain('request has been created');\r\n      expect(rideOffers[0].requests[0]).toBe('William Smith');\r\n      expect(rideOffers[0].requests.length).toBe(1);\r\n    }));\r\n\r\n  it('should not make ride request with invalid data', () => request(app)\r\n    .post('/api/v1/rides/qruhn9b5h4jk4f8uiw/requests')\r\n    .send({})\r\n    .set('Accept', 'application/json')\r\n    .expect(400)\r\n    .then((response) => {\r\n      expect(response.body.error.error).toContain('append the name parameter');\r\n      expect(rideOffers[0].requests.length).toBe(1);\r\n    }));\r\n  it('should not make ride request with invalid id', () => request(app)\r\n    .post('/api/v1/rides/qruhn9b5h4jk4f8uik/requests')\r\n    .send({ name: 'John Doe' })\r\n    .set('Accept', 'application/json')\r\n    .expect(404)\r\n    .then((response) => {\r\n      expect(response.body.error.error).toContain('Invalid ride');\r\n      expect(rideOffers[0].requests.length).toBe(1);\r\n    }));\r\n});\r\n"]}