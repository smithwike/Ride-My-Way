{"version":3,"sources":["../../src/routes/auth.js"],"names":["authRouter","express","Router","saltRound","secretKey","validateUser","req","res","next","body","email","password","name","validName","trim","length","validEmail","validator","isEmail","validPassword","status","send","error","post","then","result","bcrypt","hash","value","message","catch","compareSync","user_password","payload","username","user_name","user_email","userId","user_id","token","jwt","sign","header"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcrypt';\nimport validator from 'validator';\nimport jwt from 'jsonwebtoken';\nimport { createUser, getUser } from '../models/db-query';\n\nconst authRouter = express.Router();\nconst saltRound = 15;\nconst secretKey = 'my_secret_key';\n\nconst validateUser = (req, res, next) => {\n  const { email, password, name } = req.body;\n  const validName = typeof name === 'string' && name.trim() !== '' && name.trim().length >= 3;\n  const validEmail = typeof email === 'string' && validator.isEmail(email);\n  const validPassword = typeof password === 'string' && password.trim() !== ''\n        && password.trim().length >= 6;\n\n  if (validEmail && validPassword && validName) {\n    next();\n  } else {\n    res.status(400).send({ error: 'Invalid credentials. Make sure email is valid, name and password are at least 3 and 6 characters long respectively' });\n  }\n};\n\n\nauthRouter.post('/signup', validateUser, (req, res, next) => {\n  getUser(req.body.email)\n    .then((result) => {\n      if (result.length > 0) {\n        // console.log('user  in use');\n        res.status(400).send({\n          error: 'email in use',\n        });\n      } else {\n        // console.log('user not in use');\n        bcrypt.hash(req.body.password, saltRound)\n          .then((hash) => {\n            // start storage process\n            createUser({\n              email: req.body.email,\n              password: hash,\n              name: req.body.name,\n            })\n              .then((value) => {\n                if (value === 1) {\n                  res.send({\n                    message: 'account created',\n                  });\n                } else {\n                  next({\n                    error: 'Internal server error',\n                    status: 500,\n                  });\n                }\n              }).catch(() => {\n                next({\n                  error: 'Internal server error',\n                  status: 500,\n                });\n              });\n          }).catch(() => {\n            next({\n              error: 'Internal server error',\n              status: 500,\n            });\n          });\n      }\n    })\n    .catch(() => {\n      // hash the user's password for storage\n      res.status(500).send({\n        error: 'Internal server error',\n        status: 500,\n      });\n    });\n});\n\n\nauthRouter.post('/login', (req, res, next) => {\n  // confirm email exists in database\n\n  getUser(req.body.email)\n    .then((result) => {\n      if (bcrypt.compareSync(req.body.password, result[0].user_password)) {\n        const payload = {};\n        payload.username = result[0].user_name;\n        payload.email = result[0].user_email;\n        payload.userId = result[0].user_id;\n        const token = jwt.sign(payload, secretKey);\n        payload.token = token;\n        res.header('Authorization', `Bearer ${token}`);\n        res.send(payload);\n      } else {\n        next({\n          message: 'Invalid email or password',\n          status: 401,\n        });\n      }\n    })\n    .catch(() => {\n      next({\n        message: 'Invalid email or password',\n        status: 401,\n      });\n    });\n});\nexport default authRouter;\n\n/* getAll()\n    .then((result) => {\n      res.send(result);\n    })\n    .catch((e) => {\n      console.log(e);\n      next();\n    });\n*/\n"]}