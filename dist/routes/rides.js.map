{"version":3,"sources":["../../src/routes/rides.js"],"names":["rideCreateSuccess","message","rideRequestSuccess","ridesRouter","express","Router","verifyParameters","req","res","next","parameter","body","destination","takeOffTime","totalSeats","status","send","error","get","rideOffers","rideId","params","id","isFound","foundItem","forEach","item","post","reqBody","newRide","requests","push","isAdded","name"],"mappings":"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","file":"rides.js","sourcesContent":["import express from 'express';\nimport uniqid from 'uniqid';\nimport rideOffers from '../models/rideOffers';\n\nconst rideCreateSuccess = { message: 'Your offer has been successfully created' };\nconst rideRequestSuccess = { message: 'Your request has been created' };\nconst ridesRouter = express.Router();\n\nconst verifyParameters = (req, res, next) => {\n  const parameter = req.body;\n  if (parameter && parameter.destination && parameter.takeOffTime && parameter.totalSeats) {\n    next();\n  } else {\n    res.status(400).send({\n      error: 'Please input all the required parameters',\n      status: 400,\n    });\n  }\n};\n\nridesRouter.get('/', (req, res) => {\n  res.send(rideOffers);\n});\n\nridesRouter.get('/:id', (req, res) => {\n  const rideId = req.params.id;\n  let isFound = false;\n  let foundItem;\n  rideOffers.forEach((item) => {\n    if (item.id === rideId) {\n      foundItem = item;\n      isFound = true;\n    }\n  });\n  if (isFound) {\n    res.send(foundItem);\n  } else {\n    res.status(404).send({\n      error: 'Invalid ride',\n      status: 404,\n    });\n  }\n});\n\nridesRouter.post('/', verifyParameters, (req, res) => {\n  const reqBody = req.body;\n  const newRide = {\n    id: uniqid(),\n    destination: reqBody.destination,\n    takeOffTime: reqBody.takeOffTime,\n    totalSeats: reqBody.totalSeats,\n    requests: [],\n  };\n  if (rideOffers.push(newRide)) {\n    res.send(rideCreateSuccess);\n  } else {\n    res.status(500).send({\n      error: 'An unknown error occured',\n      status: 500,\n    });\n  }\n});\n\nridesRouter.post('/:id/requests', (req, res) => {\n  const reqBody = req.body;\n  const rideId = req.params.id;\n  let isAdded = false;\n  if (reqBody.name) {\n    rideOffers.forEach((item) => {\n      if (item.id === rideId) {\n        item.requests.push(reqBody.name);\n        isAdded = true;\n      }\n    });\n    if (isAdded) {\n      res.send(rideRequestSuccess);\n    } else {\n      res.status(404).send({\n        error: 'Invalid ride',\n        status: 404,\n      });\n    }\n  } else {\n    res.status(400).send({\n      error: 'Please append the name parameter in your request',\n      status: 400,\n    });\n  }\n});\n\n\nexport default ridesRouter;\n"]}