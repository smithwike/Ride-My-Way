{"version":3,"sources":["../../src/routes/rides.js"],"names":["rideCreateSuccess","message","rideRequestSuccess","error","status","ridesRouter","express","Router","verifyParameters","req","res","next","parameter","body","destination","takeOffTime","totalSeats","send","get","rideOffers","rideId","params","id","forEach","item","post","reqBody","newRide","requests","push","isAdded","name"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,EAAEC,SAAS,0CAAX,EAA1B;AACA,IAAMC,qBAAqB,EAAED,SAAS,+BAAX,EAA3B;AACA,IAAME,QAAQ;AACZA,SAAO,EADK;AAEZC,UAAQ;AAFI,CAAd;AAIA,IAAMC,cAAcC,kBAAQC,MAAR,EAApB;AACA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3C,MAAMC,YAAYH,IAAII,IAAtB;AACA,MAAID,aAAaA,UAAUE,WAAvB,IAAsCF,UAAUG,WAAhD,IAA+DH,UAAUI,UAA7E,EAAyF;AACvFL;AACD,GAFD,MAEO;AACLR,UAAMA,KAAN,GAAc,0CAAd;AACAA,UAAMC,MAAN,GAAe,GAAf;AACAM,QAAIN,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqBd,KAArB;AACD;AACF,CATD;;AAWAE,YAAYa,GAAZ,CAAgB,GAAhB,EAAqB,UAACT,GAAD,EAAMC,GAAN,EAAc;AACjCA,MAAIO,IAAJ,CAASE,oBAAT;AACD,CAFD;;AAIAd,YAAYa,GAAZ,CAAgB,MAAhB,EAAwB,UAACT,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1C,MAAMS,SAASX,IAAIY,MAAJ,CAAWC,EAA1B;AACAH,uBAAWI,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3B,QAAIA,KAAKF,EAAL,KAAYF,MAAhB,EAAwB;AACtBV,UAAIO,IAAJ,CAASO,IAAT;AACD;AACF,GAJD;AAKArB,QAAMA,KAAN,GAAc,cAAd;AACAA,QAAMC,MAAN,GAAe,GAAf;AACAO,OAAKR,KAAL;AACD,CAVD;;AAYAE,YAAYoB,IAAZ,CAAiB,GAAjB,EAAsBjB,gBAAtB,EAAwC,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1D,MAAMe,UAAUjB,IAAII,IAApB;AACA,MAAMc,UAAU;AACdL,QAAI,uBADU;AAEdR,iBAAaY,QAAQZ,WAFP;AAGdC,iBAAaW,QAAQX,WAHP;AAIdC,gBAAYU,QAAQV,UAJN;AAKdY,cAAU;AALI,GAAhB;AAOA,MAAIT,qBAAWU,IAAX,CAAgBF,OAAhB,CAAJ,EAA8B;AAC5BjB,QAAIO,IAAJ,CAASjB,iBAAT;AACD,GAFD,MAEO;AACLG,UAAMA,KAAN,GAAc,0BAAd;AACAA,UAAMC,MAAN,GAAe,GAAf;AACAO,SAAKR,KAAL;AACD;AACF,CAhBD;;AAkBAE,YAAYoB,IAAZ,CAAiB,eAAjB,EAAkC,UAAChB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpD,MAAMe,UAAUjB,IAAII,IAApB;AACA,MAAMO,SAASX,IAAIY,MAAJ,CAAWC,EAA1B;AACA,MAAIQ,UAAU,KAAd;AACA,MAAIJ,QAAQK,IAAZ,EAAkB;AAChBZ,yBAAWI,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3B,UAAIA,KAAKF,EAAL,KAAYF,MAAhB,EAAwB;AACtBI,aAAKI,QAAL,CAAcC,IAAd,CAAmBH,QAAQK,IAA3B;AACAD,kBAAU,IAAV;AACD;AACF,KALD;AAMA,QAAIA,OAAJ,EAAa;AACXpB,UAAIO,IAAJ,CAASf,kBAAT;AACD,KAFD,MAEO;AACLC,YAAMA,KAAN,GAAc,cAAd;AACAA,YAAMC,MAAN,GAAe,GAAf;AACAO,WAAKR,KAAL;AACD;AACF,GAdD,MAcO;AACLA,UAAMA,KAAN,GAAc,kDAAd;AACAA,UAAMC,MAAN,GAAe,GAAf;AACAO,SAAKR,KAAL;AACD;AACF,CAvBD;;kBA0BeE,W","file":"rides.js","sourcesContent":["import express from 'express';\nimport uniqid from 'uniqid';\nimport rideOffers from '../models/rideOffers';\n\nconst rideCreateSuccess = { message: 'Your offer has been successfully created' };\nconst rideRequestSuccess = { message: 'Your request has been created' };\nconst error = {\n  error: '',\n  status: 401,\n};\nconst ridesRouter = express.Router();\nconst verifyParameters = (req, res, next) => {\n  const parameter = req.body;\n  if (parameter && parameter.destination && parameter.takeOffTime && parameter.totalSeats) {\n    next();\n  } else {\n    error.error = 'Please input all the required parameters';\n    error.status = 400;\n    res.status(400).send(error);\n  }\n};\n\nridesRouter.get('/', (req, res) => {\n  res.send(rideOffers);\n});\n\nridesRouter.get('/:id', (req, res, next) => {\n  const rideId = req.params.id;\n  rideOffers.forEach((item) => {\n    if (item.id === rideId) {\n      res.send(item);\n    }\n  });\n  error.error = 'Invalid ride';\n  error.status = 404;\n  next(error);\n});\n\nridesRouter.post('/', verifyParameters, (req, res, next) => {\n  const reqBody = req.body;\n  const newRide = {\n    id: uniqid(),\n    destination: reqBody.destination,\n    takeOffTime: reqBody.takeOffTime,\n    totalSeats: reqBody.totalSeats,\n    requests: [],\n  };\n  if (rideOffers.push(newRide)) {\n    res.send(rideCreateSuccess);\n  } else {\n    error.error = 'An unknown error occured';\n    error.status = 500;\n    next(error);\n  }\n});\n\nridesRouter.post('/:id/requests', (req, res, next) => {\n  const reqBody = req.body;\n  const rideId = req.params.id;\n  let isAdded = false;\n  if (reqBody.name) {\n    rideOffers.forEach((item) => {\n      if (item.id === rideId) {\n        item.requests.push(reqBody.name);\n        isAdded = true;\n      }\n    });\n    if (isAdded) {\n      res.send(rideRequestSuccess);\n    } else {\n      error.error = 'Invalid ride';\n      error.status = 404;\n      next(error);\n    }\n  } else {\n    error.error = 'Please append the name parameter in your request';\n    error.status = 400;\n    next(error);\n  }\n});\n\n\nexport default ridesRouter;\n"]}